{
    "docs": [
        {
            "location": "/", 
            "text": "iOS Code Signing\n\n\nIf you are developing an iOS app and you want to test it on a real device or if you want to distribute it to the App Store, you have to code sign your application. This ensures that the user can trust that your app is coming from a known and trusted source that Apple knows.\n\n\nThis guide was created to help iOS developers with code signing and to ease the sometimes messy process.\n\n\n\n\nContributing to this guide\n\n\nThis guide is open source, you can find the sources in GitHub, just simply select the GitHub repo from the top right corner or click on the pencil icon on every page to edit it's contents.\n\n\nIf you find a typo, would like to add or modify a content, feel free to update it on GitHub and to send a PR.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#ios-code-signing", 
            "text": "If you are developing an iOS app and you want to test it on a real device or if you want to distribute it to the App Store, you have to code sign your application. This ensures that the user can trust that your app is coming from a known and trusted source that Apple knows.  This guide was created to help iOS developers with code signing and to ease the sometimes messy process.   Contributing to this guide  This guide is open source, you can find the sources in GitHub, just simply select the GitHub repo from the top right corner or click on the pencil icon on every page to edit it's contents.  If you find a typo, would like to add or modify a content, feel free to update it on GitHub and to send a PR.", 
            "title": "iOS Code Signing"
        }, 
        {
            "location": "/generate-code-signing-files/", 
            "text": "Generate a Code Signing Certificate\n\n\nGenerate a Code Signing Certificate using Xcode 8\n\n\nFirst you have to add your Apple ID to Accounts preferences in Xcode. If you are already done with this, you can skip to step 6.\n\n\n\n\nStart Xcode\n\n\nSelect Xcode \n Preferences from the navigation bar.\n\n\nAt the top of the window select \nAccounts\n.\n\n\nClick on the \n+\n on the lower left corner and select \nAdd Apple ID...\n\n\n\n\nA dialog will appear. Add your Apple ID and your password, then select \nSign in\n. If you don't have an account you can create your Apple ID by selecting \nCreate Apple ID\n.\n\n\n\nSelect your Apple ID and your team from the right side bar, then click on \nView Details...\n.\n\n\nA dialog will appear where you will see your code signing identities and the provisioning profiles.\n\n\n\nUnder the signing identities locate the \niOS Development\n and \niOS Distribution\n profiles. If you have not created them you will see a \nCreate\n button next to them. Simply select it and Xcode will issue and download your code signing identities for you.\n\n\n\n\n\n\nWarning\n\n\nIf you have already have Code Signing Identities issued, you will see a \nReset\n button next to them. You can issue new certificates with it, that Xcode will generate and download, however note that this will invalidate your previous certificate, so only do this if you lost those files or you know what you are doing!\n\n\n\n\nGenerate a Code Signing Certificate manually\n\n\n\n\nOpen your \nKeychain Access\n app on macOS.\n\n\nSelect \nKeychain Access\n \n \nCertificate Assistant\n \n \nRequest a Certificate From a Certificate Authority...\n\n\nFill in the \nUser's Email Address\n and the \nCommon Name\n and select \nSaved to Disk\n. Click on \nContinue\n and save the generated \ncertSigningRequest\n file locally.\n\n\n\nGo to \nhttps://developer.apple.com\n and log in to your account.\n\n\nSelect \nCertificates, IDs \n Profiles\n from the left sidebar.\n\n\nGo to \nCertificates\n and click on the \n+\n button on the top right corner.\n\n\nSelect \niOS App Development\n and click Continue.\n\n\nOn the next page you see the instructions for creating the \ncertSigningRequest\n file. Click continue.\n\n\nUpload the created \ncertSigningRequest\n to the form and click continue. It will generate your code signing certificate for you.\n\n\nDownload the certificate and double click on it to install it. Once installed it will be added to your \nKeychain Access\n app.\n\n\n\n\nGenerate a Provisioning Profile\n\n\nProvisioning is the process of preparing and configuring an app to launch on devices and to use app services. Development Provisioning Profiles holds the device identifiers ( UUID ) that is eligible to run your app. Distribution Provisioning Profiles can include App Store profiles, that let's you distribute your app to the App Store and Ad-hoc profiles that is good for distributing to your testers.\n\n\nGenerate a Provisioning Profile with Xcode 8\n\n\nXcode will automatically generate an App ID for your project, that matches your unique bundle ID for your project. An App ID is used to identify one or more of your apps. It can be an \nexplicit App ID\n that only matches one unique bundle identifier or a \nwildcard App ID\n that can match multiple ones.\n\n\nXcode will also create a \nTeam Provisioning Profile\n for your project automatically, so you can start deploying to your device automatically.\n\n\nIf you hit any issues you should make sure that the device is eligible, for example if the device doesn't match the deployment target you will get an error.\n\n\nAlso make sure that your app is connected to the correct Team.\n\n\n\n\nSelect your project file from Xcode's project navigator\n\n\nGo to the \nSigning\n section and under the \nTeam\n select your correct team.\n\n\n\n\n\n\n\nNote\n\n\nIf you hit any issues and can't resolve it move to the manual step and set up Provisioning Profiles according to the documentation.\n\n\n\n\n\n\nNote\n\n\nTo setup a distribution Provisioning Profile go ahead with the manual setup.\n\n\n\n\nGenerate a Provisioning Profile manually\n\n\nSetup an App ID\n\n\n\n\nIf you don't have already created an App ID for your project go to \nhttps://developer.apple.com\n and log in.\n\n\nSelect Certificates, Identifiers \n Profiles from the left sidebar\n\n\nNavigate to Identifiers \n App IDs\n\n\nIn the \nApp ID Description\n add a recognizable name for your App ID\n\n\nSelect \nExplicit App ID\n and add your bundle identifier to the field.\n\n\nSelect any additional \nApp Services\n that you need.\n\n\nClick continue.\n\n\n\n\nGenerate a Provisioning Profile\n\n\n\n\nGo to \nhttps://developer.apple.com\n and log in.\n\n\nSelect Certificates, Identifiers \n Profiles from the left sidebar\n\n\nNavigate to Provisioning Profiles \n All\n\n\nSelect the \n+\n from the top right corner.\n\n\nFor Development select the correct project type under \nDevelopment\n, or for distribution select the correct one under \nDistribution\n and click continue.\n\n\nSelect the App ID you would like to use.\n\n\nSelect the certificates you wish to include in the Provisioning Profile. These certificates will be able to build with this profile and click continue.\n\n\nSelect all the devices you would like to use with this profile and click continue.\n\n\nName your Provisioning Profile and click continue.\n\n\nYour profile is generated. You can download it to your device and double click on it to install to your macOS.", 
            "title": "Generate code signing files"
        }, 
        {
            "location": "/generate-code-signing-files/#generate-a-code-signing-certificate", 
            "text": "", 
            "title": "Generate a Code Signing Certificate"
        }, 
        {
            "location": "/generate-code-signing-files/#generate-a-code-signing-certificate-using-xcode-8", 
            "text": "First you have to add your Apple ID to Accounts preferences in Xcode. If you are already done with this, you can skip to step 6.   Start Xcode  Select Xcode   Preferences from the navigation bar.  At the top of the window select  Accounts .  Click on the  +  on the lower left corner and select  Add Apple ID...   A dialog will appear. Add your Apple ID and your password, then select  Sign in . If you don't have an account you can create your Apple ID by selecting  Create Apple ID .  Select your Apple ID and your team from the right side bar, then click on  View Details... .  A dialog will appear where you will see your code signing identities and the provisioning profiles.  Under the signing identities locate the  iOS Development  and  iOS Distribution  profiles. If you have not created them you will see a  Create  button next to them. Simply select it and Xcode will issue and download your code signing identities for you.    Warning  If you have already have Code Signing Identities issued, you will see a  Reset  button next to them. You can issue new certificates with it, that Xcode will generate and download, however note that this will invalidate your previous certificate, so only do this if you lost those files or you know what you are doing!", 
            "title": "Generate a Code Signing Certificate using Xcode 8"
        }, 
        {
            "location": "/generate-code-signing-files/#generate-a-code-signing-certificate-manually", 
            "text": "Open your  Keychain Access  app on macOS.  Select  Keychain Access     Certificate Assistant     Request a Certificate From a Certificate Authority...  Fill in the  User's Email Address  and the  Common Name  and select  Saved to Disk . Click on  Continue  and save the generated  certSigningRequest  file locally.  Go to  https://developer.apple.com  and log in to your account.  Select  Certificates, IDs   Profiles  from the left sidebar.  Go to  Certificates  and click on the  +  button on the top right corner.  Select  iOS App Development  and click Continue.  On the next page you see the instructions for creating the  certSigningRequest  file. Click continue.  Upload the created  certSigningRequest  to the form and click continue. It will generate your code signing certificate for you.  Download the certificate and double click on it to install it. Once installed it will be added to your  Keychain Access  app.", 
            "title": "Generate a Code Signing Certificate manually"
        }, 
        {
            "location": "/generate-code-signing-files/#generate-a-provisioning-profile", 
            "text": "Provisioning is the process of preparing and configuring an app to launch on devices and to use app services. Development Provisioning Profiles holds the device identifiers ( UUID ) that is eligible to run your app. Distribution Provisioning Profiles can include App Store profiles, that let's you distribute your app to the App Store and Ad-hoc profiles that is good for distributing to your testers.", 
            "title": "Generate a Provisioning Profile"
        }, 
        {
            "location": "/generate-code-signing-files/#generate-a-provisioning-profile-with-xcode-8", 
            "text": "Xcode will automatically generate an App ID for your project, that matches your unique bundle ID for your project. An App ID is used to identify one or more of your apps. It can be an  explicit App ID  that only matches one unique bundle identifier or a  wildcard App ID  that can match multiple ones.  Xcode will also create a  Team Provisioning Profile  for your project automatically, so you can start deploying to your device automatically.  If you hit any issues you should make sure that the device is eligible, for example if the device doesn't match the deployment target you will get an error.  Also make sure that your app is connected to the correct Team.   Select your project file from Xcode's project navigator  Go to the  Signing  section and under the  Team  select your correct team.    Note  If you hit any issues and can't resolve it move to the manual step and set up Provisioning Profiles according to the documentation.    Note  To setup a distribution Provisioning Profile go ahead with the manual setup.", 
            "title": "Generate a Provisioning Profile with Xcode 8"
        }, 
        {
            "location": "/generate-code-signing-files/#generate-a-provisioning-profile-manually", 
            "text": "", 
            "title": "Generate a Provisioning Profile manually"
        }, 
        {
            "location": "/generate-code-signing-files/#setup-an-app-id", 
            "text": "If you don't have already created an App ID for your project go to  https://developer.apple.com  and log in.  Select Certificates, Identifiers   Profiles from the left sidebar  Navigate to Identifiers   App IDs  In the  App ID Description  add a recognizable name for your App ID  Select  Explicit App ID  and add your bundle identifier to the field.  Select any additional  App Services  that you need.  Click continue.", 
            "title": "Setup an App ID"
        }, 
        {
            "location": "/generate-code-signing-files/#generate-a-provisioning-profile_1", 
            "text": "Go to  https://developer.apple.com  and log in.  Select Certificates, Identifiers   Profiles from the left sidebar  Navigate to Provisioning Profiles   All  Select the  +  from the top right corner.  For Development select the correct project type under  Development , or for distribution select the correct one under  Distribution  and click continue.  Select the App ID you would like to use.  Select the certificates you wish to include in the Provisioning Profile. These certificates will be able to build with this profile and click continue.  Select all the devices you would like to use with this profile and click continue.  Name your Provisioning Profile and click continue.  Your profile is generated. You can download it to your device and double click on it to install to your macOS.", 
            "title": "Generate a Provisioning Profile"
        }, 
        {
            "location": "/exporting-code-signing-files/", 
            "text": "The easiest way to collect these files is to use \nbitrise.io's\n open source \ncodesigndoc tool\n. This tool runs a clean Archive on your Mac, and analyzes the Xcode log output to see which code signing files Xcode used during the Archive.\n\n\nFor \nXcode projects\n use the following command:\n\n\nbash -l -c \n$(curl -sfL https://raw.githubusercontent.com/bitrise-tools/codesigndoc/master/_scripts/install_wrap-xcode.sh)\n\n\n\n\n\nFor \nXamarin project\n us the following command:\n\n\nbash -l -c \n$(curl -sfL https://raw.githubusercontent.com/bitrise-tools/codesigndoc/master/_scripts/install_wrap-xamarin.sh)\n\n\n\n\n\nThis will archive your project and locate all the required code signing files and provisioning profiles and export it to a directory for you.\n\n\n\n\nWarning\n\n\nBecause \ncodesigndoc\n does a full code archiving and exporting to generate an API, make sure you can build and archive your project. Otherwise it won't be able to locate the files for you\n\n\n\n\n\n\nStart your Terminal app on your macOS.\n\n\nRun the one liner command above for your project type.\n\n\nThe script will download and start itself. It will ask for your Xcode project file. Select the \nxcodeproj\n, or \nxcworkspace\n you are using with the Finder app and simply drag and drop it to the Terminal.\n\n\n\nThe script will parse your project and show all the available schemes or configurations.\n\n\nSelect the one you are using.\n\n\nThe \ncodesigndoc\n tool will export all the required code signing files and provisioning profiles for you and open up a Finder window with all of them.\n\n\n\n\nExporting using Xcode 8\n\n\nExporting manually", 
            "title": "Exporting code signing files"
        }, 
        {
            "location": "/exporting-code-signing-files/#exporting-using-xcode-8", 
            "text": "", 
            "title": "Exporting using Xcode 8"
        }, 
        {
            "location": "/exporting-code-signing-files/#exporting-manually", 
            "text": "", 
            "title": "Exporting manually"
        }, 
        {
            "location": "/code-signing-ios-frameworks/", 
            "text": "Developing iOS frameworks\n\n\nWhen you are developing an iOS framework you have to distribute a code signed version of your framework, however you don't need to sign it with your \nDistribution\n profile, the \nDeveloper\n profile will be enough.\nAfter distribution the framework will be re-codesigned by the frameworks' consumer during the code signing process.\n1\n\n\nIf you attempt to build it without code signing Xcode won't produce a \n.framework\n file and you will receive the following error:\n\n\nCodeSign error: code signing is required for product type 'Framework' in SDK 'iOS 8.1'\n\n\n\n\nUsing an iOS framework\n\n\nAs a framework consumer you have to sign the framework during the signing process, otherwise your build will fail.\n\n\n\n\n\n\n\n\n\n\nhttp://stackoverflow.com/questions/30963294/creating-ios-osx-frameworks-is-it-necessary-to-codesign-them-before-distributin", 
            "title": "Code signing iOS frameworks"
        }, 
        {
            "location": "/code-signing-ios-frameworks/#developing-ios-frameworks", 
            "text": "When you are developing an iOS framework you have to distribute a code signed version of your framework, however you don't need to sign it with your  Distribution  profile, the  Developer  profile will be enough.\nAfter distribution the framework will be re-codesigned by the frameworks' consumer during the code signing process. 1  If you attempt to build it without code signing Xcode won't produce a  .framework  file and you will receive the following error:  CodeSign error: code signing is required for product type 'Framework' in SDK 'iOS 8.1'", 
            "title": "Developing iOS frameworks"
        }, 
        {
            "location": "/code-signing-ios-frameworks/#using-an-ios-framework", 
            "text": "As a framework consumer you have to sign the framework during the signing process, otherwise your build will fail.      http://stackoverflow.com/questions/30963294/creating-ios-osx-frameworks-is-it-necessary-to-codesign-them-before-distributin", 
            "title": "Using an iOS framework"
        }
    ]
}